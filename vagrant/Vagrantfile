# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'

Vagrant.require_version ">= 1.6.0"

CLOUD_CONFIG_PATH = File.join(File.dirname(__FILE__), "user-data")
CONFIG = File.join(File.dirname(__FILE__), "config.rb")
OPENJDK = File.join(File.dirname(__FILE__), "openjdk.tar.xz")
BTRBCK = File.join(File.dirname(__FILE__), "btrbck.jar")

#determine hostname
require 'socket'
$hostname = Socket.gethostname

# Defaults for config options defined in CONFIG
$num_instances=Hash.new 1

$update_channel=Hash.new 'alpha'

$enable_serial_logging = false
$vb_gui = false
$vb_memory = Hash.new 1024
$vb_cpus = Hash.new 1
$static_ip = {}
$bridge_interface = {}
$server_disk_file = 'server_disk.vdi'

# Attempt to apply the deprecated environment variable NUM_INSTANCES to
# $num_instances while allowing config.rb to override it
if ENV["NUM_INSTANCES"].to_i > 0 && ENV["NUM_INSTANCES"]
  $num_instances = ENV["NUM_INSTANCES"].to_i
end

if File.exist?(CONFIG)
  require CONFIG
end

# download the openjkd package and extract the data.tar.xz
if !File.exist?(OPENJDK)
	system ("/usr/bin/wget -O openjdk.deb http://security.ubuntu.com/ubuntu/pool/main/o/openjdk-7/openjdk-7-jre-headless_7u55-2.4.7-1ubuntu1_amd64.deb")
	system ("ar p openjdk.deb data.tar.xz > #{OPENJDK}")
	system ("rm openjdk.deb")
end

# download btrbck
if !File.exist?(BTRBCK)
	system ("/usr/bin/wget -O btrbck.jar https://github.com/ruediste1/btrbck/releases/download/1.0/btrbck-cli-1.0.jar")
end

def getValue(map, i)
  map[$hostname+'_'+i]
end

Vagrant.configure("2") do |config|
  config.vm.box = "coreos-%s" % $update_channel[$hostname]
  config.vm.box_version = ">= 308.0.1"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json" % $update_channel[$hostname]

  config.vm.provider :vmware_fusion do |vb, override|
    override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json" % $update_channel[$hostname]
  end

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.ssh.private_key_path = ["../admin_rsa", "vagrant_rsa" ]

  (1..$num_instances[$hostname]).each do |i|
    config.vm.define vm_name = "#{$hostname}-core-%02d" % i do |config|
      config.vm.hostname = vm_name

      if $enable_serial_logging
        logdir = File.join(File.dirname(__FILE__), "log")
        FileUtils.mkdir_p(logdir)

        serialFile = File.join(logdir, "%s-serial.txt" % vm_name)
        FileUtils.touch(serialFile)

        config.vm.provider :vmware_fusion do |v, override|
          v.vmx["serial0.present"] = "TRUE"
          v.vmx["serial0.fileType"] = "file"
          v.vmx["serial0.fileName"] = serialFile
          v.vmx["serial0.tryNoRxLoss"] = "FALSE"
        end

        config.vm.provider :virtualbox do |vb, override|
          vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
          vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
        end
      end

      if $expose_docker_tcp
        config.vm.network "forwarded_port", guest: 2375, host: ($expose_docker_tcp + i - 1), auto_correct: true
      end

      config.vm.provider :vmware_fusion do |vb|
        vb.gui = $vb_gui
      end

      config.vm.provider :virtualbox do |vb|
        vb.gui = $vb_gui
        vb.memory = $vb_memory["#{$hostname}_#{i}"]
        vb.cpus = $vb_cpus["#{$hostname}_#{i}"]
      end
      
      # setup additional disk
      if i==1 
       config.vm.provider :virtualbox do |vb|
           unless File.exist?($server_disk_file)
             vb.customize ['createhd', '--filename', $server_disk_file, '--size', 500 * 1024]
           end
           vb.customize ['storageattach', :id, '--storagectl', 'IDE Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', $server_disk_file]
        end
      end 

      # configure network
      if $static_ip["#{$hostname}_#{i}"]
        config.vm.network "public_network", bridge: $bridge_interface["#{$hostname}_#{i}"], 
          ip: $static_ip["#{$hostname}_#{i}"]
      else
        config.vm.network "public_network", bridge: $bridge_interface["#{$hostname}_#{i}"]
      end

      # Uncomment below to enable NFS for sharing the host machine into the coreos-vagrant VM.
      #config.vm.synced_folder ".", "/home/core/share", id: "core", :nfs => true, :mount_options => ['nolock,vers=3,udp']

      if File.exist?(CLOUD_CONFIG_PATH)
        config.vm.provision :file, :source => "#{CLOUD_CONFIG_PATH}", :destination => "/tmp/vagrantfile-user-data"
        config.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
      end

      # replace/remove insecure vagrant keys
      config.vm.provision :file, :source => "../admin_rsa.pub", :destination => "/home/core/.ssh/authorized_keys"
      config.vm.provision :shell, :inline => "rm /home/core/.ssh/authorized_keys.d/coreos-cloudinit", :privileged => true
      
      if $static_ip["#{$hostname}_#{i}"]
      	config.vm.provision :shell, :inline => "echo #{$static_ip["#{$hostname}_#{i}"]} > /etc/primaryip", :privileged => true
      end
      
      # setup btrbck
      config.vm.provision :file, :source => "install.sh", :destination => "install.sh"
      config.vm.provision :file, :source => OPENJDK, :destination => "openjdk.tar.xz"
      config.vm.provision :file, :source => BTRBCK, :destination => "btrbck.jar"
      config.vm.provision :shell, :inline => "chmod 755 install.sh; ./install.sh", :privileged => true      

    end
  end
end
